{"version":3,"sources":["../src/data_formatter.js"],"names":["_","decodeGeoHash","DataFormatter","ctrl","kbn","data","series","length","highestValue","lowestValue","Number","MAX_VALUE","forEach","serie","lastPoint","last","datapoints","lastValue","isArray","location","find","locations","loc","key","toUpperCase","alias","isString","push","value","valueFormatted","valueRounded","dataValue","locationName","name","locationLatitude","latitude","locationLongitude","longitude","stats","panel","valueName","roundValue","parseInt","decimals","valueRange","encodedGeohash","decodedGeohash","dataList","esGeoPoint","esMetric","result","type","columnNames","columns","column","columnIndex","text","rows","row","esLocationName","createDataValue","datapoint","tableData","tableQueryOptions","queryType","geohashField","latitudeField","longitudeField","labelField","metricField","point","undefined","Math","round"],"mappings":"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","file":"data_formatter.js","sourcesContent":["import _ from 'lodash';\nimport decodeGeoHash from './geohash';\n\nexport default class DataFormatter {\n  constructor(ctrl, kbn) {\n    this.ctrl = ctrl;\n    this.kbn = kbn;\n  }\n\n  setValues(data) {\n    if (this.ctrl.series && this.ctrl.series.length > 0) {\n      let highestValue = 0;\n      let lowestValue = Number.MAX_VALUE;\n\n      this.ctrl.series.forEach((serie) => {\n        const lastPoint = _.last(serie.datapoints);\n        const lastValue = _.isArray(lastPoint) ? lastPoint[0] : null;\n        const location = _.find(this.ctrl.locations, (loc) => { return loc.key.toUpperCase() === serie.alias.toUpperCase(); });\n\n        if (!location) return;\n\n        if (_.isString(lastValue)) {\n          data.push({key: serie.alias, value: 0, valueFormatted: lastValue, valueRounded: 0});\n        } else {\n          const dataValue = {\n            key: serie.alias,\n            locationName: location.name,\n            locationLatitude: location.latitude,\n            locationLongitude: location.longitude,\n            value: serie.stats[this.ctrl.panel.valueName],\n            valueFormatted: lastValue,\n            valueRounded: 0\n          };\n\n          if (dataValue.value > highestValue) highestValue = dataValue.value;\n          if (dataValue.value < lowestValue) lowestValue = dataValue.value;\n\n          dataValue.valueRounded = this.kbn.roundValue(dataValue.value, parseInt(this.ctrl.panel.decimals, 10) || 0);\n          data.push(dataValue);\n        }\n      });\n\n      data.highestValue = highestValue;\n      data.lowestValue = lowestValue;\n      data.valueRange = highestValue - lowestValue;\n    }\n  }\n\n  createDataValue(encodedGeohash, decodedGeohash, locationName, value) {\n    const dataValue = {\n      key: encodedGeohash,\n      locationName: locationName,\n      locationLatitude: decodedGeohash.latitude,\n      locationLongitude: decodedGeohash.longitude,\n      value: value,\n      valueFormatted: value,\n      valueRounded: 0\n    };\n\n    dataValue.valueRounded = this.kbn.roundValue(dataValue.value, this.ctrl.panel.decimals || 0);\n    return dataValue;\n  }\n\n  setGeohashValues(dataList, data) {\n    if (!this.ctrl.panel.esGeoPoint || !this.ctrl.panel.esMetric) return;\n\n    if (dataList && dataList.length > 0) {\n      let highestValue = 0;\n      let lowestValue = Number.MAX_VALUE;\n\n      dataList.forEach((result) => {\n        if (result.type === 'table') {\n          const columnNames = {};\n\n          result.columns.forEach((column, columnIndex) => {\n            columnNames[column.text] = columnIndex;\n          });\n\n          result.rows.forEach((row) => {\n            const encodedGeohash = row[columnNames[this.ctrl.panel.esGeoPoint]];\n            const decodedGeohash = decodeGeoHash(encodedGeohash);\n            const locationName = this.ctrl.panel.esLocationName ? row[columnNames[this.ctrl.panel.esLocationName]] : encodedGeohash;\n            const value = row[columnNames[this.ctrl.panel.esMetric]];\n\n            const dataValue = this.createDataValue(encodedGeohash, decodedGeohash, locationName, value, highestValue, lowestValue);\n            if (dataValue.value > highestValue) highestValue = dataValue.value;\n            if (dataValue.value < lowestValue) lowestValue = dataValue.value;\n            data.push(dataValue);\n          });\n\n          data.highestValue = highestValue;\n          data.lowestValue = lowestValue;\n          data.valueRange = highestValue - lowestValue;\n        } else {\n          result.datapoints.forEach((datapoint) => {\n            const encodedGeohash = datapoint[this.ctrl.panel.esGeoPoint];\n            const decodedGeohash = decodeGeoHash(encodedGeohash);\n            const locationName = this.ctrl.panel.esLocationName ? datapoint[this.ctrl.panel.esLocationName] : encodedGeohash;\n            const value = datapoint[this.ctrl.panel.esMetric];\n\n            const dataValue = this.createDataValue(encodedGeohash, decodedGeohash, locationName, value, highestValue, lowestValue);\n            if (dataValue.value > highestValue) highestValue = dataValue.value;\n            if (dataValue.value < lowestValue) lowestValue = dataValue.value;\n            data.push(dataValue);\n          });\n\n          data.highestValue = highestValue;\n          data.lowestValue = lowestValue;\n          data.valueRange = highestValue - lowestValue;\n        }\n      });\n    }\n  }\n\n  static tableHandler(tableData) {\n    const datapoints = [];\n\n    if (tableData.type === 'table') {\n      const columnNames = {};\n\n      tableData.columns.forEach((column, columnIndex) => {\n        columnNames[columnIndex] = column.text;\n      });\n\n      tableData.rows.forEach((row) => {\n        const datapoint = {};\n\n        row.forEach((value, columnIndex) => {\n          const key = columnNames[columnIndex];\n          datapoint[key] = value;\n        });\n\n        datapoints.push(datapoint);\n      });\n    }\n\n    return datapoints;\n  }\n\n  setTableValues(tableData, data) {\n    if (tableData && tableData.length > 0) {\n      let highestValue = 0;\n      let lowestValue = Number.MAX_VALUE;\n\n      tableData[0].forEach((datapoint) => {\n        let key;\n        let longitude;\n        let latitude;\n\n        if (this.ctrl.panel.tableQueryOptions.queryType === 'geohash') {\n          const encodedGeohash = datapoint[this.ctrl.panel.tableQueryOptions.geohashField];\n          const decodedGeohash = decodeGeoHash(encodedGeohash);\n\n          latitude = decodedGeohash.latitude;\n          longitude = decodedGeohash.longitude;\n          key = encodedGeohash;\n        } else {\n          latitude = datapoint[this.ctrl.panel.tableQueryOptions.latitudeField];\n          longitude = datapoint[this.ctrl.panel.tableQueryOptions.longitudeField];\n          key = `${latitude}_${longitude}`;\n        }\n\n        const dataValue = {\n          key: key,\n          locationName: datapoint[this.ctrl.panel.tableQueryOptions.labelField] || 'n/a',\n          locationLatitude: latitude,\n          locationLongitude: longitude,\n          value: datapoint[this.ctrl.panel.tableQueryOptions.metricField],\n          valueFormatted: datapoint[this.ctrl.panel.tableQueryOptions.metricField],\n          valueRounded: 0\n        };\n\n        if (dataValue.value > highestValue) highestValue = dataValue.value;\n        if (dataValue.value < lowestValue) lowestValue = dataValue.value;\n\n        dataValue.valueRounded = this.kbn.roundValue(dataValue.value, this.ctrl.panel.decimals || 0);\n        data.push(dataValue);\n      });\n\n      data.highestValue = highestValue;\n      data.lowestValue = lowestValue;\n      data.valueRange = highestValue - lowestValue;\n    }\n  }\n\n  setJsonValues(data) {\n    if (this.ctrl.series && this.ctrl.series.length > 0) {\n      let highestValue = 0;\n      let lowestValue = Number.MAX_VALUE;\n\n      this.ctrl.series.forEach((point) => {\n        const dataValue = {\n          key: point.key,\n          locationName: point.name,\n          locationLatitude: point.latitude,\n          locationLongitude: point.longitude,\n          value: (point.value !== undefined) ? point.value : 1,\n          valueRounded: 0\n        };\n        if (dataValue.value > highestValue) highestValue = dataValue.value;\n        if (dataValue.value < lowestValue) lowestValue = dataValue.value;\n        dataValue.valueRounded = Math.round(dataValue.value);\n        data.push(dataValue);\n      });\n      data.highestValue = highestValue;\n      data.lowestValue = lowestValue;\n      data.valueRange = highestValue - lowestValue;\n    }\n  }\n}\n"]}